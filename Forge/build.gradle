plugins {
    alias libs.plugins.forgegradle
    alias libs.plugins.librarian
    alias libs.plugins.mixin
    alias libs.plugins.cursegradle
    alias libs.plugins.minotaur
}

archivesBaseName = "${mod_id}-${libs.versions.minecraft.get()}-forge"

minecraft {
    mappings channel: 'parchment', version: "${libs.versions.parchment.minecraft.get()}-${libs.versions.parchment.mappings.get()}-${libs.versions.minecraft.get()}"

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.test
                    source sourceSets.main
                    source project(":Common").sourceSets.test
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.test
                    source sourceSets.main
                    source project(":Common").sourceSets.test
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}


sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
}

jarJar.enable()

dependencies {
    minecraft libs.forge

    implementation(annotationProcessor(libs.mixinextras.common.get()))
    implementation(jarJar(libs.mixinextras.forge.get())) {
        jarJar.ranged(it, "[${libs.versions.mixinextras.get()},)")
    }

    annotationProcessor "org.spongepowered:mixin:${libs.versions.mixin.get()}:processor"

    implementation fg.deobf(libs.cgl.forge.get())

    compileOnly "com.matyrobbrt.gml:gml:${libs.versions.gml.get()}:all"
    runtimeOnly(fg.deobf("com.matyrobbrt.gml:gml:${libs.versions.gml.get()}:all")) {
        exclude module: 'transform'
    }

    compileOnly project(path: ":Common", configuration: "namedElements")
    testCompileOnly project(path: ':Common', configuration: 'testOut')
}

mixin {
    add sourceSets.main, 'jsonwrangler.refmap.json'
    //config 'mixin.jsonwrangler.forge.json'
    add project(":Common").sourceSets.main, 'jsonwrangler.refmap.json'
    config 'mixin.jsonwrangler.json'
}

tasks.withType(GroovyCompile) {
    source project(":Common").sourceSets.main.allGroovy
}

tasks.withType(JavaCompile) {
    source project(":Common").sourceSets.main.allJava
}

processResources {
    from project(':Common').sourceSets.main.resources
    exclude 'mods.groovy'
}

jar {
    classifier 'partial'
    finalizedBy('reobfJar')
}

tasks.build.dependsOn tasks.jarJar

reobf {
    jarJar {}
}

tasks.jarJar {
    classifier ''
    finalizedBy tasks.reobfJarJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = "${mod_id}-${libs.versions.minecraft.get()}-forge"
            version = project.version
            artifacts = [tasks.jarJar, sourcesJar]
        }
    }
}

if (project.hasProperty("curseforge_key")) {
    curseforge {
        apiKey = project.curseforge_key
        project {
            id = '843930'
            releaseType = "${project.release_type}"
            addGameVersion libs.versions.minecraft.get()
            addGameVersion 'Forge'
            mainArtifact(jar) {
                displayName = "JsonWrangler [Forge] v$project.version"
            }
            relations {
                requiredDependency 'gml'
            }
        }
        options {
            forgeGradleIntegration = true
        }
    }
}

if (project.hasProperty("modrinth_key")) {
    modrinth {
        token = project.modrinth_key
        projectId = 'XodEFO40'
        versionNumber = "$project.version"
        versionType = "${project.release_type}"
        detectLoaders = false
        uploadFile = jar
        gameVersions = [libs.versions.minecraft.get()]
        loaders = ['forge']
        dependencies {
            // not on modrinth yet:
            //required.project 'gml'
        }
    }
}
